@page "/cadastro"
@using System.Net
@using System.Net.Mail
@inject HttpClient Http

<div class="vh-100">
    <EditForm Model="@cadastroModel" OnValidSubmit="Cadastrar">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="p-4 gap-4">
            <input type="text" placeholder="Nome" @bind="cadastroModel.Nome" />
            <input type="text" placeholder="Sobrenome" @bind="cadastroModel.Sobrenome" />
            <input type="date" placeholder="Data de Nascimento" @bind="cadastroModel.DataNascimento" />
            <input type="email" placeholder="Email" @bind="cadastroModel.CadastroEmail" />
            <input type="tel" placeholder="Telefone" @bind="cadastroModel.Telefone" />
            <select class="form-select" aria-label="Default select example" @bind="cadastroModel.Genero">
                <option value="">Genero</option>
                <option value="M">Masculino</option>
                <option value="F">Feminino</option>
                <option value="O">Outro</option>
            </select>
            <input type="number" placeholder="CEP" @bind="cadastroModel.Cep" @bind:event="oninput" @onchange="BuscarCep" />
            <input type="text" placeholder="Rua" @bind="cadastroModel.Rua" />
            <input type="number" placeholder="Numero" @bind="cadastroModel.Numero" />
            <input type="text" placeholder="Complemento" @bind="cadastroModel.Complemento" />
            <input type="text" placeholder="Bairro" @bind="cadastroModel.Bairro" />
            <input type="text" placeholder="Cidade" @bind="cadastroModel.Cidade" />
            <input type="text" placeholder="Estado" @bind="cadastroModel.Estado" />
        </div>
        <button type="submit" class="m-3 btn btn-primary w-60 align-items-center">Cadastrar</button>
    </EditForm>
</div>

@code {
    private CadastroModel cadastroModel = new CadastroModel();

    public class CadastroModel {
        public string Nome { get; set; } = string.Empty;
        public string Sobrenome { get; set; } = string.Empty;
        public DateTime DataNascimento { get; set; }
        public string CadastroEmail { get; set; } = string.Empty;
        public string Telefone { get; set; } = string.Empty;
        public string Genero { get; set; } = string.Empty;
        public string Cep { get; set; } = string.Empty;
        public string Rua { get; set; } = string.Empty;
        public string Numero { get; set; } = string.Empty;
        public string Complemento { get; set; } = string.Empty;
        public string Bairro { get; set; } = string.Empty;
        public string Cidade { get; set; } = string.Empty;
        public string Estado { get; set; } = string.Empty;
    }

    public class ViaCep {
        public string Logradouro { get; set; } = string.Empty;
        public string Bairro { get; set; } = string.Empty;
        public string Localidade { get; set; } = string.Empty;
        public string Uf { get; set; } = string.Empty;
        public bool Erro { get; set; }
    }


    private async Task Cadastrar() {
        await EnviarEmailAsync(
            cadastroModel.CadastroEmail,
            "Confirmação de Cadastro",
            "Obrigado por se cadastrar!<br><br>Este é um email automático de confirmação, espero que tenha gostado de se cadastrar conosco.<br><br>Atenciosamente,<br>Equipe HeaLFit"
        );
        await Task.CompletedTask; // Simulação de operação assíncrona
    }

    private async Task BuscarCep(ChangeEventArgs e) {
        string cep = e.Value?.ToString()?.Replace("-", "").Trim() ?? string.Empty;
        if (Connectivity.NetworkAccess == NetworkAccess.Internet) {
            try {
                var response = await Http.GetAsync($"https://viacep.com.br/ws/{cep}/json/");
                if (response.IsSuccessStatusCode) {
                    var endereco = await response.Content.ReadFromJsonAsync<ViaCep>();
                    if (endereco != null && !endereco.Erro) {
                        cadastroModel.Rua = endereco.Logradouro;
                        cadastroModel.Bairro = endereco.Bairro;
                        cadastroModel.Cidade = endereco.Localidade;
                        cadastroModel.Estado = endereco.Uf;
                    }
                    else {
                        await DisplayAlert("Erro", "CEP não encontrado.", "OK");
                    }
                }
            }
            catch (Exception ex) {
                await DisplayAlert("Erro", $"Erro ao buscar o CEP: {ex.Message}", "OK");
            }
        }
        else {
            await DisplayAlert("Erro", "Sem conexão com a internet.", "OK");
        }
    }

    private async Task EnviarEmailAsync(string email, string assunto, string mensagem)
    {
        var apiKey = "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"; 
        var client = new SendGridClient(apiKey);
        var from = new EmailAddress("souscarlout@outlook.com", "Gabriel");
        var subject = assunto;
        var to = new EmailAddress(email);
        var plainTextContent = mensagem;
        var htmlContent = $"<p>{mensagem}</p>";
        var msg = MailHelper.CreateSingleEmail(from, to, subject, plainTextContent, htmlContent);

        var response = await client.SendEmailAsync(msg);


        if (response.StatusCode == HttpStatusCode.NotFound)
        {
            var errorMessage = await response.Body.ReadAsStringAsync();
            await DisplayAlert("Erro", $"Falha ao enviar e-mail: {errorMessage}", "OK");
        }
        
        else
        {
            await DisplayAlert("Sucesso", $"Email de confirmação enviado com sucesso para:{email} ", "OK");
        }
    }


    private async Task DisplayAlert(string title, string message, string cancel) {
        if (Application.Current?.MainPage != null) {
            await Application.Current.MainPage.DisplayAlert(title, message, cancel);
        }
    }
}