@page "/cadastro"
@using System.Net
@using System.Net.Mail
@using System.ComponentModel.DataAnnotations;
@using LoginMaui.Models
@using LoginMaui.Services
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ICadastroService CadastroService


<div class="vh-100">
    <div class="p-4 gap-4">
        <input type="text" placeholder="Nome" @bind="nome" />
        <input type="text" placeholder="Sobrenome" @bind="sobrenome" />
        <input type="date" placeholder="Data de Nascimento" @bind="dataNascimento" />
        <input type="email" placeholder="Email" @bind="cadastroEmail" />
        <input type="tel" placeholder="Telefone" @bind="telefone" />
        <select class="form-select" aria-label="Default select example" @bind="genero">
            <option value="">Genero</option>
            <option value="M">Masculino</option>
            <option value="F">Feminino</option>
            <option value="O">Outro</option>
        </select>
        <input type="number" placeholder="CEP" @bind="cep" @bind:event="oninput" @onchange="BuscarCep" />
        <input type="text" placeholder="Rua" @bind="rua" />
        <input type="number" placeholder="Numero" @bind="numero" />
        <input type="text" placeholder="Complemento" @bind="complemento" />
        <input type="text" placeholder="Bairro" @bind="bairro" />
        <input type="text" placeholder="Cidade" @bind="cidade" />
        <input type="text" placeholder="Estado" @bind="estado" />
    </div>
    <button type="submit" class="m-3 btn btn-primary w-60 align-items-center" @onclick="Cadastrar">Cadastrar</button>
</div>

@code {
    public string nome;
    public string sobrenome;
    public DateTime dataNascimento = DateTime.Today;
    public string cadastroEmail;
    public string telefone;
    public string genero;
    public string cep;
    public string rua;
    public string numero;
    public string complemento;
    public string bairro;
    public string cidade;
    public string estado;

    private async void Cadastrar() {

        var response = await CadastroService.AddCadastro(new CadastroModel {

            Nome = nome,
            Sobrenome = sobrenome,
            DataNascimento = dataNascimento,
            CadastroEmail = cadastroEmail,
            Telefone = telefone,
            Genero = genero,
            Cep = cep,
            Rua = rua,
            Numero = numero,
            Complemento = complemento,
            Bairro = bairro,
            Cidade = cidade,
            Estado = estado
        });

        if (response > 0) {

            await DisplayAlert("Sucesso", "Cadastro concluido", "Ok");
            Navigation.NavigateTo("/PaginaInicial");
        }
        else {

            await DisplayAlert("Erro", "Erro ao cadastrar", "OK");
        }
    }

    private async Task BuscarCep(ChangeEventArgs e) {
        string cep = e.Value?.ToString()?.Replace("-", "").Trim() ?? string.Empty;
        try {
            var response = await Http.GetAsync($"https://viacep.com.br/ws/{cep}/json/");
            if (response.IsSuccessStatusCode) {
                var endereco = await response.Content.ReadFromJsonAsync<ViaCep>();
                if (endereco != null && !endereco.Erro) {
                    rua = endereco.Logradouro;
                    bairro = endereco.Bairro;
                    cidade = endereco.Localidade;
                    estado = endereco.Uf;
                }
                else {
                    await DisplayAlert("Erro", "CEP não encontrado.", "OK");
                }
            }
        }
        catch (Exception ex) {
            await DisplayAlert("Erro", $"Erro ao buscar o CEP: {ex.Message}", "OK");
        }

    }

    private async Task EnviarEmailAsync(string email, string assunto, string mensagem) {
        var apiKey = "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";
        var client = new SendGridClient(apiKey);
        var from = new EmailAddress("souscarlout@outlook.com", "Gabriel");
        var subject = assunto;
        var to = new EmailAddress(email);
        var plainTextContent = mensagem;
        var htmlContent = $"<p>{mensagem}</p>";
        var msg = MailHelper.CreateSingleEmail(from, to, subject, plainTextContent, htmlContent);

        var response = await client.SendEmailAsync(msg);

        if (response.StatusCode == HttpStatusCode.NotFound) {
            var errorMessage = await response.Body.ReadAsStringAsync();
            await DisplayAlert("Erro", $"Falha ao enviar e-mail 404: {errorMessage}", "OK");
        }


    }

    private async Task DisplayAlertAndNavigate(string title, string message, string cancel, string navigateTo) {
        if (Application.Current?.MainPage != null) {
            await Application.Current.MainPage.DisplayAlert(title, message, cancel);
            Navigation.NavigateTo(navigateTo);
        }
    }

    private async Task DisplayAlert(string title, string message, string cancel) {
        if (Application.Current?.MainPage != null) {
            await Application.Current.MainPage.DisplayAlert(title, message, cancel);
        }
    }
}